************************************************************ || leetcode question - 560 || ************************************************************
class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> prefixSumCount = new HashMap<>();
        prefixSumCount.put(0, 1); 
        int prefixSum = 0;
        int count = 0;
        for (int num : nums) {
            prefixSum += num;
            if (prefixSumCount.containsKey(prefixSum - k)) {
                count += prefixSumCount.get(prefixSum - k);
            }
            prefixSumCount.put(prefixSum, prefixSumCount.getOrDefault(prefixSum, 0) + 1);
        }
        return count;
    }
}




************************************************************ || leetcode question - 56 || ************************************************************
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        List<int[]> res = new ArrayList<>();
        int[] curr = intervals[0];

        for (int[] in : intervals) {
            if (in[0] <= curr[1]) curr[1] = Math.max(curr[1], in[1]);
            else {
                res.add(curr);
                curr = in;
            }
        }
        res.add(curr);
        return res.toArray(new int[res.size()][]);
    }
}
